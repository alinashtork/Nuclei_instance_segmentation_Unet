# -*- coding: utf-8 -*-
"""Postprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XJGJQm5OQs1HKntgZyvXgPWC4Jh6VsV9
"""

from google.colab import drive
drive.mount('/content/gdrive/')

import numpy as np
from google.colab.patches import cv2_imshow
import os
import cv2
import tensorflow as tf

names = os.listdir('/content/gdrive/MyDrive/miscnn_data/data_new2')
names.sort()
len(names)

path = '/content/gdrive/MyDrive/miscnn_data/data_new2/'
for name in names:
  img_path = path + name
  image = cv2.imread(img_path + '/' + 'segmentation.png', cv2.IMREAD_GRAYSCALE)
  cv2_imshow(image)

  # make contours and masks with contours
  n = image.shape[0]
  m = image.shape[1]
  cnt_to_draw = np.ones([n, m])*255

  image.astype(np.uint8)

  cnts, hier = cv2.findContours(image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)

  for cnt in cnts:
    for coords in cnt:
        cnt_to_draw[coords[0][1], coords[0][0]] = 0

    #cv2_imshow(cnt_to_draw)
    print(name)
    hull = cv2.convexHull(cnt, returnPoints = False)

    defects = cv2.convexityDefects(cnt, hull)
    max_defects = []

    if defects is None: break
    elif len(defects) < 2: break

    for i in range(defects.shape[0]):
        s,e,f,d = defects[i,0]
        max_defects.append(f)
    def_sorted = max_defects.copy()
    def_sorted.sort()
    ind1 = max_defects.index(def_sorted[0])
    ind2 = max_defects.index(def_sorted[1])

    if ind1 > 500 and ind2 > 500:

      s1,e1,f1,d1 = defects[ind1,0]
      s2,e2,f2,d2 = defects[ind2,0]
      start = tuple(cnt[f1][0])
      end = tuple(cnt[f2][0])

      cv2.line(cnt_to_draw,start,end,[0,255,0],1)

      cv2_imshow(cnt_to_draw)
      cv2.waitKey(0)